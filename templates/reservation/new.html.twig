{% extends 'base.html.twig' %}

{% block title %}Nouvelle réservation - {{ company.name }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        .reservation-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1, h2 {
            color: #007bff;
            margin-bottom: 20px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            font-weight: bold;
        }
        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }
        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }
        .opening-hours {
            margin-top: 30px;
            padding: 15px;
            background-color: #e9ecef;
            border-radius: 5px;
        }
        .opening-hours ul {
            list-style-type: none;
            padding: 0;
        }
        .opening-hours li {
            margin-bottom: 5px;
        }
    </style>
{% endblock %}

{% block body %}
<div class="reservation-container">
    <h1>Nouvelle réservation chez {{ company.name }}</h1>

    {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
        <div class="form-group">
            {{ form_label(form.service) }}
            {{ form_widget(form.service, {'attr': {'class': 'form-control'}}) }}
            {{ form_errors(form.service) }}
        </div>

        <div class="form-group">
            {{ form_label(form.date) }}
            {{ form_widget(form.date, {'attr': {'class': 'form-control datepicker'}}) }}
            {{ form_errors(form.date) }}
        </div>

        <div class="form-group">
            {{ form_label(form.time) }}
            {{ form_widget(form.time, {'attr': {'class': 'form-control'}}) }}
            {{ form_errors(form.time) }}
        </div>

        <button type="submit" class="btn btn-primary">Réserver</button>
    {{ form_end(form) }}

    <div class="opening-hours">
        <h2>Horaires d'ouverture</h2>
        <ul>
        {% for schedule in company.schedules %}
            <li><strong>{{ schedule.dayOfWeek|capitalize }}</strong>: {{ schedule.openingTime|date('H:i') }} - {{ schedule.closingTime|date('H:i') }}</li>
        {% endfor %}
        </ul>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const openingHours = {{ openingHours|raw }};

            flatpickr(".datepicker", {
                dateFormat: "Y-m-d",
                minDate: "today",
                locale: "fr",
                enable: [
                    function(date) {
                        const dayOfWeek = date.toLocaleDateString('en-US', {weekday: 'long'}).toLowerCase();
                        return openingHours.some(schedule => schedule.day === dayOfWeek);
                    }
                ],
                onChange: function(selectedDates, dateStr, instance) {
                    updateTimePickerHours(dateStr);
                }
            });

            function updateTimePickerHours(selectedDate) {
                const dayOfWeek = new Date(selectedDate).toLocaleDateString('en-US', {weekday: 'long'}).toLowerCase();
                const schedule = openingHours.find(s => s.day === dayOfWeek);
                
                if (schedule) {
                    const timeSelect = document.querySelector('#reservation_time');
                    timeSelect.innerHTML = '<option value="">Choisissez une heure</option>'; // Reset with placeholder

                    const timeChoices = generateTimeChoices(schedule.open, schedule.close);
                    
                    timeChoices.forEach(time => {
                        const option = document.createElement('option');
                        option.value = time;
                        option.textContent = time;
                        timeSelect.appendChild(option);
                    });

                    timeSelect.disabled = false;
                } else {
                    console.error('No schedule found for the selected day');
                }
            }

            function generateTimeChoices(openTime, closeTime) {
                const timeChoices = [];
                const [openHour, openMinute] = openTime.split(':').map(Number);
                const [closeHour, closeMinute] = closeTime.split(':').map(Number);

                let current = new Date(2000, 0, 1, openHour, openMinute);
                const end = new Date(2000, 0, 1, closeHour, closeMinute);

                while (current <= end) {
                    timeChoices.push(current.toTimeString().slice(0, 5));
                    current.setMinutes(current.getMinutes() + 30);
                }

                return timeChoices;
            }

            const initialDate = document.querySelector('.datepicker').value;
            if (initialDate) {
                updateTimePickerHours(initialDate);
            } else {
                document.querySelector('#reservation_time').disabled = true;
            }
        });
    </script>
{% endblock %}